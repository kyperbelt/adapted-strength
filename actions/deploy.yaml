name: deploy-app
# id: deploy

on:
  workflow_dispatch:
  push:
    branches:
      - actions

jobs:
  build:
    name: Build jar
    id: build
    runs-on: ubuntu-latest
    outputs:
      jar: ${{ steps.out_jar.outputs.JAR }}
      prop: ${{ steps.out_jar.outputs.APP_PROP }}
      front : ${{ steps.out_front.outputs.FRONT }}
      compose: ${{ steps.out_jar.outputs.COMPOSE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install java & npm
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          sudo apt-get install -y npm

      - name: Compile to jar
        run: |
          ./authorization/gradlew build

      - name: Remove plain jar
        run: |
          rm ./authorization/build/libs/*plain.jar

      - name: Output jar 
        id: out_jar
        run: |
          echo "JAR=$(cat ./authorization/build/libs/*.jar)"" >> $GITHUB_OUTPUT 
          echo "APP_PROP=$(./authorization/build/resources/main/application.properties)" >> $GITHUB_OUTPUT 
          echo "COMPOSE=$(./authorization/compose.yaml)" >> $GITHUB_OUTPUT 

      - name: Compile & output front end
        id: out_front
        run: |
          cd adapted-strength/frontend/adapted_strength-app
          npm install
          npm run build
          tar -czf web.tar.gz build        
          echo "FRONT=$(cat web.tar.gz)" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    env:
      SSH_KEY: ${{ secrets.AWS_PRIVATE_DEPLOY_KEY }}
      HOST: ${{ secrets.AWS_INSTANCE_URL }}
      USER: ${{ secrets.AWS_INSTANCE_USER }}
      CONN: ${{ join({0}@{1}, secrets.AWS_INSTANCE_URL, secrets.AWS_INSTANCE_USER) }}

    steps:
      # - name: Checkout Repo
      #   uses: actions/checkout@v4

      - name: Write ssh key to file
        run: |
          echo $SSH_KEY > "~/.ssh/key.pem"

      - name: Write outputs to file
        run: |
          echo "${{ needs.build.outputs.jar }}" > app.jar
          echo "${{ needs.build.outputs.prop }}" > application.properites
          echo "${{ needs.build.outputs.compose }}" > compose.yaml
          echo "${{ needs.build.outputs.front }}" > web.tar.gz

      - name: Compress files
        run: |
          tar -czf app.tar.gz app.jar application.properites compose.yaml

      - name: Set up known hosts file
        run: |
          ssh-keyscan $HOST >> ~/.ssh/known_hosts

      - name: Copy build files to instance
        run: |
          echo "put web.tar.gz tmp/web.tar.gz" >> batchfile
          echo "put app.tar.gz tmp/app.tar.gz" >> batchfile

          sftp -i "~/.ssh/key.pem" -b batchfile $CONN

      # TODO - add expand / contract pattern for database migration
      # - name: Run deployment script
      #     ssh -i "~/.ssh/key.pem" $CONN "./deploy.sh & exit"