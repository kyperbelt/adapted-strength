plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.terabite'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // implementation 'org.springframework.session:spring-session-core'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // implementation 'jakarta.mail:jakarta.mail-api:2.1.2' might be needed for password reset
	  implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // JWT specific
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation("com.google.guava:guava:33.1.0-jre") // For time-based expiration map
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // AWS S3 integration
    // implementation 'org.springframework.cloud:spring-cloud-starter-aws'
    // implementation 'org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config'

    implementation(platform("software.amazon.awssdk:bom:2.21.1"))
    implementation("software.amazon.awssdk:s3")
    
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.1.0")
    implementation 'io.awspring.cloud:spring-cloud-aws-starter'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'
    
    // For Notifications (Firebase)
	  implementation 'com.google.firebase:firebase-admin:9.2.0'



    //Stripe specfic
    implementation 'com.stripe:stripe-java:24.0.0'
    // implementation 'com.google.code.gson:gson:2.7'
    implementation 'com.google.code.gson:gson:2.10.1'
}

// when ./gradlew bootRun is executed first require that the application 
// runs a shell script located ../../scripts/check_env_vars.sh
bootRun {
    dependsOn 'checkEnvVars'
    dependsOn 'test'
}

tasks.register('nukeDatabase', Exec) {
	commandLine 'docker', 'stop', 'authorization-mysql-1'
	commandLine 'docker', 'rm', 'authorization-mysql-1'
}

tasks.register('checkEnvVars', Exec) {
    commandLine 'bash', '../scripts/check_env_vars.sh'
}

tasks.register('bootRunFresh', Exec) {
	dependsOn 'bootRun'
	dependsOn 'nukeDatabase'
	dependsOn 'clean'
	
	tasks.findByName('bootRun').mustRunAfter 'nukeDatabase'
	tasks.findByName('nukeDatabase').mustRunAfter 'clean'
}


tasks.named('test') {
    useJUnitPlatform()
    testLogging {
	events "passed", "skipped", "failed"
    }
}


