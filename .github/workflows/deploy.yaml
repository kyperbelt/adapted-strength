name: deploy-app
# id: deploy

on:
  workflow_dispatch:
  push:
    branches:
      - actions

jobs:
  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    env:
      SERVICE: 'authorization'
      HOST: ${{ secrets.AWS_INSTANCE_URL }}
      USER: ${{ secrets.AWS_INSTANCE_USER }}
      SSH_KEY: "${{ secrets.AWS_PRIVATE_DEPLOY_KEY }}"

    # outputs:
    #   # jar: ${{ steps.out_jar.outputs.JAR }}
    #   # prop: ${{ steps.out_jar.outputs.APP_PROP }}
    #   front : ${{ steps.out_front.outputs.FRONT }}
    #   app : ${{ steps.out_app.outputs.APP }}
    #   # compose: ${{ steps.out_jar.outputs.COMPOSE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Install java & npm
      #   run: |
      #     sudo apt-get update
      #     # sudo apt-get remove -y openjdk-11-jdk
      #     # sudo apt-get install -y openjdk-17-jdk
      #     # Installed
      #     # sudo apt-get install -y npm

      - name: Get jar file name
        id: jar_name
        shell: python
        run: |
          import re, os
          version = ''
          service = os.getenv('SERVICE')
          with open(f'{service}/build.gradle', 'r') as f:
              if l := re.findall('version.*=.*', f.read() ):
                  version = l[0].split('=')[1].strip()
              
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as out:
              out.write(f'JAR={service}-{version}.jar\n')
              out.write(f'VER={version}')

      - name: Print output
        run: |
            echo ${{ steps.jar_name.outputs.JAR }}

      - name: Build jar
        run: |
          cd authorization
          ./gradlew build -Dorg.gradle.java.home=$JAVA_HOME_17_X64
          cd ..
          rm ./$SERVICE/build/libs/*plain.jar
          mv $SERVICE/build/libs/${{ steps.jar_name.outputs.JAR }} .
          mv $SERVICE/build/resources/main/application.properties .
          mv $SERVICE/entrypoint.sh .

      - name: Build envfile
        run: |
          echo ADAPTED_STRENGTH_BASE_PRICE_ID='${{ secrets.ADAPTED_STRENGTH_BASE_PRICE_ID }}' >> envfile
          echo ADAPTED_STRENGTH_GENERAL_PRICE_ID='${{ secrets.ADAPTED_STRENGTH_GENERAL_PRICE_ID }}' >> envfile
          echo ADAPTED_STRENGTH_EMAIL='${{ secrets.ADAPTED_STRENGTH_EMAIL }}' >> envfile
          echo ADAPTED_STRENGTH_PASSWORD='${{ secrets.ADAPTED_STRENGTH_PASSWORD }}' >> envfile
          echo ADAPTED_STRENGTH_GENERAL_PRICE_ID='${{ secrets.ADAPTED_STRENGTH_GENERAL_PRICE_ID }}' >> envfile
          echo ADAPTED_STRENGTH_SPECIFIC_PRICE_ID='${{ secrets.ADAPTED_STRENGTH_SPECIFIC_PRICE_ID }}' >> envfile
          echo ADAPTED_STRENGTH_STRIPE_ENDPOINT_SECRET='${{ secrets.ADAPTED_STRENGTH_STRIPE_ENDPOINT_SECRET }}' >> envfile
          echo ADAPTED_STRENGTH_STRIPE_SECRET_KEY='${{ secrets.ADAPTED_STRENGTH_STRIPE_SECRET_KEY }}' >> envfile
          echo AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' >> envfile
          echo AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' >> envfile
  
      - name: Build image
        run: |
            docker build -f "$SERVICE/dockerfile" \
            --build-arg jar_path=${{ steps.jar_name.outputs.JAR }} \
            --output type=tar,dest=app.tar \
            -t "$service:${{ steps.jar_name.outputs.VER }}" \
            .

      - name: Save image
        run: |
            docker save -o app.tar

      - name: Set up ssh
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          ssh-keyscan $HOST >> ~/.ssh/known_hosts

      - name: Set up known hosts file
        run: |
          ssh-keyscan $HOST >> ~/.ssh/known_hosts

      - name: Copy build files to instance
        run: |
          # echo "put web.tar.gz tmp/web.tar.gz" >> batchfile
          echo "put app.tar tmp/app.tar" >> batchfile
          # echo "put envfile.tar.gz tmp/envfile.tar.gz" >> batchfile

          sftp -i key.pem -b batchfile $USER@$HOST
      
      # - name: Build and compress jar
      #   run: |
      #     cd authorization
      #     ./gradlew build -Dorg.gradle.java.home=$JAVA_HOME_17_X64
      #     cd ..
      #     rm ./authorization/build/libs/*plain.jar
      #     mv authorization/build/libs/*.jar .
      #     mv authorization/build/resources/main/application.properties .
      #     mv authorization/compose.yaml .
      #     tar -czf app.tar.gz *.jar application.properties compose.yaml

        

      # - name: Remove plain jar
      #   run: |
      #     rm ./authorization/build/libs/*plain.jar

      # - name: Output app
      #   id: out_app
      #   run: |
      #     tar -czf app.tar.gz authorization/build/libs/*.jar authorization/build/resources/main/application.properties authorization/compose.yaml

      # - name: Output jar 
      #   id: out_jar
      #   run: |
      #     echo "JAR=$(cat ./authorization/build/libs/*.jar)" >> $GITHUB_OUTPUT 
      #     echo "APP_PROP=$(cat ./authorization/build/resources/main/application.properties)" >> $GITHUB_OUTPUT 
      #     echo "COMPOSE=$(cat ./authorization/compose.yaml)" >> $GITHUB_OUTPUT 

      # - name: Compile and compress front end
      #   id: out_front
      #   run: |
      #     cd frontend/adapted_strength-app
      #     npm install
      #     npm run build
      #     tar -czf web.tar.gz build 
      #     cd ../..

      
      # - name: Build envfile
      #   run: |
      #     echo ADAPTED_STRENGTH_BASE_PRICE_ID='${{ secrets.ADAPTED_STRENGTH_BASE_PRICE_ID }}' >> envfile
      #     echo ADAPTED_STRENGTH_GENERAL_PRICE_ID='${{ secrets.ADAPTED_STRENGTH_GENERAL_PRICE_ID }}' >> envfile
      #     echo ADAPTED_STRENGTH_EMAIL='${{ secrets.ADAPTED_STRENGTH_EMAIL }}' >> envfile
      #     echo ADAPTED_STRENGTH_PASSWORD='${{ secrets.ADAPTED_STRENGTH_PASSWORD }}' >> envfile
      #     echo ADAPTED_STRENGTH_GENERAL_PRICE_ID='${{ secrets.ADAPTED_STRENGTH_GENERAL_PRICE_ID }}' >> envfile
      #     echo ADAPTED_STRENGTH_SPECIFIC_PRICE_ID='${{ secrets.ADAPTED_STRENGTH_SPECIFIC_PRICE_ID }}' >> envfile
      #     echo ADAPTED_STRENGTH_STRIPE_ENDPOINT_SECRET='${{ secrets.ADAPTED_STRENGTH_STRIPE_ENDPOINT_SECRET }}' >> envfile
      #     echo ADAPTED_STRENGTH_STRIPE_SECRET_KEY='${{ secrets.ADAPTED_STRENGTH_STRIPE_SECRET_KEY }}' >> envfile
      #     echo AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' >> envfile
      #     echo AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' >> envfile
      #     # tar -czf envfile.tar.gz envfile


      # - name: Set up ssh
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "$SSH_KEY" > key.pem
      #     chmod 600 key.pem
      #     ssh-keyscan $HOST >> ~/.ssh/known_hosts

      # - name: Set up known hosts file
      #   run: |
      #     ssh-keyscan $HOST >> ~/.ssh/known_hosts

      # - name: Copy build files to instance
      #   run: |
      #     # echo "put web.tar.gz tmp/web.tar.gz" >> batchfile
      #     echo "put app.tar.gz tmp/app.tar.gz" >> batchfile
      #     echo "put envfile.tar.gz tmp/envfile.tar.gz" >> batchfile

      #     sftp -i key.pem -b batchfile $USER@$HOST

      # TODO - add expand / contract pattern for database migration
      # - name: Run deployment script
      #   run: |
      #     ssh -i key.pem $USER@$HOST "./deploy.sh"

  